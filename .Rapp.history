length(FertAllIntenties[,1])
length(FertAllIntensities[,1])
FertAll <- merge(rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities),
FertAll <- merge(rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities), rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values), by.x="Spectrum", by.y="Spectrum")
head(F4352Fertall)
head(F4352Fertll)
head(F4352FertAll)
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")
is.data.frame(F4352FertAll$Intensities)
head(F4352FertAll$Intensities)
str(F4352FertAll)
FertAllIntensities <- data.frame(rep(F4352FertAll$Values$Spectrum, 3), rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)
)
colnames(FertAllIntensities)[1] <- "Spectrum"
head(FertAllIntensities)
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", FertAllValues)#
colnames(FertAllValues) <- gsub("*.L.alpha", "", FertAllValues)#
colnames(FertAllValues) <- gsub("*.L.beta", "", FertAllValues)
head(FertAllValues)
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)
head(FertAllIntensities)
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"], F4473FertAll[["Values"]]["Spectrum"], F4504FertAll[["Values"]]["Spectrum"])
head(FertAllIntensities)
F4352FertAll[["Values"]]["Spectrum"]
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(as.vector(F4352FertAll[["Values"]]["Spectrum"]), as.vector(F4473FertAll[["Values"]]["Spectrum"]), as.vector(F4504FertAll[["Values"]]["Spectrum"])
)
head(FertAllIntensities)
as.vector(F4352FertAll[["Values"]]["Spectrum"])
F4352FertAll[["Values"]]["Spectrum"][,1]
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])
head(FertAllIntensities)
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", FertAllValues)#
colnames(FertAllValues) <- gsub("*.L.alpha", "", FertAllValues)#
colnames(FertAllValues) <- gsub("*.L.beta", "", FertAllValues)
head(FertAllValues)
is.data.frame(F4352FertAll$Values)
head(F4352FertAll$Values)
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)
head(FertAllValues)
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues)#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))
head(FertAllValues)
FertAll <- merge(FertAllIntensities, FertAllValues, by.x="Spectrum", by.y="Spectrum")
head(FertAll)
FertAll$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))
head(FertAll)
P.plot <- ggplot(FertAll) +#
ggpoint(aes(P.K.alpha, P, colour=Instrument, shape=Instrument)) +#
theme_light()#
P.plot
library(ggplot2)
P.plot <- ggplot(FertAll) +#
ggpoint(aes(P.K.alpha, P, colour=Instrument, shape=Instrument)) +#
theme_light()#
P.plot
P.plot <- ggplot(FertAll) +#
geom_point(aes(P.K.alpha, P, colour=Instrument, shape=Instrument)) +#
theme_light()#
P.plot
P.plot <- ggplot(FertAll) +#
geom_point(aes(P.K.alpha, P, colour=Instrument, shape=Instrument)) +#
stat_smooth(method="lm")#
theme_light()#
P.plot
P.plot <- ggplot(FertAll) +#
geom_point(aes(P.K.alpha, P, colour=Instrument, shape=Instrument)) +#
stat_smooth(method="lm") +#
theme_light()#
P.plot
P.plot <- ggplot(FertAll, aes(P.K.alpha, P, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
theme_light()#
P.plot
head(FertAllIntensities)
quant_file <- F4504FertAll
elements <- names(quant_file[["calList"]]
)
elements
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Sample", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Sample, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Sample")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Sample), FUN="sum")#
    colnames(compton.frame.ag) <- c("Sample", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept)-lukas.intercept/(intensity+lukas.intercept))),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Sample", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lukas.intercept.tc)-lukas.intercept.tc/(intensity+lukas.intercept.tc))),lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Sample, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Sample")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Sample), FUN="sum")#
    colnames(compton.frame.ag) <- c("Sample", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
#
element_predictions <- function(count.table, the.cal, elements, variables, valdata){#
    predicted.list <- pblapply(elements, function (x)#
    if(input$filetype=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(input$filetype=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(input$filetype=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(input$filetype=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(input$filetype=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(input$filetype=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(input$filetype=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(input$filetype=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(input$filetype=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(input$filetype=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(input$filetype=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(input$filetype=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Sample), length(elements))#
    predicted.frame <- data.frame(count.table$Sample, predicted.vector)#
    colnames(predicted.frame) <- c("Sample",  gsub('\\.K.alpha', '', elements))#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}
generatePredictions <- functon(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Specta"]]#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
#
    return(element.predictions)#
}
generatePredictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Specta"]]#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
#
    return(element.predictions)#
}
FertAllPredictions <- generatePredictions(F4504FertAll)
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(ggtern)#
library(random)#
library(rhandsontable)#
library(random)#
library(Cairo)#
library(gghighlight)#
library(ggmap)
FertAllPredictions <- generatePredictions(F4504FertAll)
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Specta"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Sample), length(elements))#
    predicted.frame <- data.frame(count.table$Sample, predicted.vector)#
    colnames(predicted.frame) <- c("Sample",  gsub('\\.K.alpha', '', elements))#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}
FertAllPredictions <- element_predictions(F4504FertAll)
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(ggtern)#
library(random)#
library(rhandsontable)#
library(random)#
library(Cairo)#
library(gghighlight)#
library(ggmap)#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Sample, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Sample), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Sample, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Sample), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Sample, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Sample), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Sample, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Sample), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Sample", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Sample, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Sample")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Sample), FUN="sum")#
    colnames(compton.frame.ag) <- c("Sample", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept)-lukas.intercept/(intensity+lukas.intercept))),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Sample", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lukas.intercept.tc)-lukas.intercept.tc/(intensity+lukas.intercept.tc))),lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Sample, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Sample")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Sample), FUN="sum")#
    colnames(compton.frame.ag) <- c("Sample", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Specta"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Sample), length(elements))#
    predicted.frame <- data.frame(count.table$Sample, predicted.vector)#
    colnames(predicted.frame) <- c("Sample",  gsub('\\.K.alpha', '', elements))#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")#
FertAllPredictions <- element_predictions(F4504FertAll)
quant_file <- F4504FertAll
count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Specta"]]
predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }
)
head(count.table)
ls(the.cal)
elements
variables
head(valdata)
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Sample), length(elements))#
    predicted.frame <- data.frame(count.table$Sample, predicted.vector)#
    colnames(predicted.frame) <- c("Sample",  gsub('\\.K.alpha', '', elements))#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}
FertAllPredictions <- element_predictions(F4504FertAll)
valdata <- quant_file[["Spectra"]]
head(valdata)
tail(valdata)
data <- valdata
spectra.line.table <- count.table
element.line <- P.K.alpha
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(ggtern)#
library(random)#
library(rhandsontable)#
library(random)#
library(Cairo)#
library(gghighlight)#
library(ggmap)#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Sample")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Sample", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Sample", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Sample")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Sample", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept)-lukas.intercept/(intensity+lukas.intercept))),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Sample", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lukas.intercept.tc)-lukas.intercept.tc/(intensity+lukas.intercept.tc))),lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Sample")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Sample", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Sample",  gsub('\\.K.alpha', '', elements))#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")#
FertAllPredictions <- element_predictions(F4504FertAll)
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(ggtern)#
library(random)#
library(rhandsontable)#
library(random)#
library(Cairo)#
library(gghighlight)#
library(ggmap)#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept)-lukas.intercept/(intensity+lukas.intercept))),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lukas.intercept.tc)-lukas.intercept.tc/(intensity+lukas.intercept.tc))),lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  gsub('\\.K.alpha', '', elements))#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")#
FertAllPredictions <- element_predictions(F4504FertAll)
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(ggtern)#
library(random)#
library(rhandsontable)#
library(random)#
library(Cairo)#
library(gghighlight)#
library(ggmap)#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept)-lukas.intercept/(intensity+lukas.intercept))),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lukas.intercept.tc)-lukas.intercept.tc/(intensity+lukas.intercept.tc))),lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    count.table$Spectrum <- quant_file[["Values"]]["Spectrum"][,1]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }, cl=6L#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  gsub('\\.K.alpha', '', elements))#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")#
FertAllPredictions <- element_predictions(F4504FertAll)
head(FertAllPredictions)
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(ggtern)#
library(random)#
library(rhandsontable)#
library(random)#
library(Cairo)#
library(gghighlight)#
library(ggmap)#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept)-lukas.intercept/(intensity+lukas.intercept))),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lukas.intercept.tc)-lukas.intercept.tc/(intensity+lukas.intercept.tc))),lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    count.table$Spectrum <- quant_file[["Values"]]["Spectrum"][,1]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }, cl=6L#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")#
###Fertilizer#
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])#
#
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))#
#
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by.x="Spectrum", by.y="Spectrum")#
FertAll$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))#
#
FertAllPredictions <- element_predictions(F4504FertAll)
FertAllPredictions <- rbind(element_predictions(F4352FertAll), element_predictions(F4473FertAll), element_predictions(F4504FertAll))
FertAllValCurves <- merge(FertAllPredictions, FertAllValues, by.x="Spectrum", by.y="Spectrum")#
FertAll$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))
FertAllValCurves <- merge(FertAllPredictions, FertAllValues, by.x="Spectrum", by.y="Spectrum")#
FertAllValCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))
head(FertAllValCurves)
FertAll <- list(FertAllCalCurves, FertAllValCurves)
ls(Fertall)
names(FertAll) <- c("CalCurves", "ValCurves")
ls(FertAll)
head(FertAll[["ValCurves"]])
length(FertAllValCurves[,1])
length(FertAllPredictions[,1])
length(FertAllValues[,1])
FertAllValCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Values[,1])), rep("F4473", length(F4352FertAll$Values[,1])), rep("F4504", length(F4352FertAll$Values[,1])))
length(FertAllValues[,1])
###Fertilizer#
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])
length(FertAllIntensities[,1])
###Fertilizer#
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])#
#
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))#
#
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by.x="Spectrum", by.y="Spectrum")#
FertAllCalCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))#
#
FertAllPredictions <- rbind(element_predictions(F4352FertAll), element_predictions(F4473FertAll), element_predictions(F4504FertAll))#
#
FertAllValCurves <- merge(FertAllPredictions, FertAllValues, by.x="Spectrum", by.y="Spectrum")#
FertAllValCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Values[,1])), rep("F4473", length(F4352FertAll$Values[,1])), rep("F4504", length(F4352FertAll$Values[,1])))#
#
FertAll <- list(FertAllCalCurves, FertAllValCurves)#
names(FertAll) <- c("CalCurves", "ValCurves")
length(FertAll[[1]][,1])
length(FertAll[[2]][,1])
length(FertAllValCurves[,1])
length(FertAllValues[,1])
FertAllCalCurves[,1]
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by.x="Spectrum", by.y="Spectrum")
length(FertAllCalCurves[,1])
length(FertAllValues[,1])
length(FertAllIntensities[,1])
ls(FertAllIntensities)
ls(FertAllValues)
468/3
test <-  c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))
length(test)
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)
length(FertAllIntensities[,1])
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])
length(FertAllIntensities[,1])
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))
length(FertallValues[,1])
length(FertAllValues[,1])
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by.x="Spectrum", by.y="Spectrum")
length(FertAllCalCurves[,1])
head(FertAllIntensities$Spectrum)
head(FertAllValues$Spectrum)
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by="Spectrum")
length(FertAllCalCurves[,1])
###Fertilizer#
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])#
FertAllIntensities$.id <- seq(1, length(FertAllIntensities[,1]), 1)#
#
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))#
FertAllValues$.id <- seq(1, length(FertAllValues[,1]), 1)#
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by=".id")#
FertAllCalCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))#
#
FertAllPredictions <- rbind(element_predictions(F4352FertAll), element_predictions(F4473FertAll), element_predictions(F4504FertAll))#
FertAllPredictions$.id <- seq(1, length(FertAllPredictions[,1]), 1)#
FertAllValCurves <- merge(FertAllPredictions, FertAllValues, by=".id")#
FertAllValCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Values[,1])), rep("F4473", length(F4352FertAll$Values[,1])), rep("F4504", length(F4352FertAll$Values[,1])))#
#
FertAll <- list(FertAllCalCurves, FertAllValCurves)#
names(FertAll) <- c("CalCurves", "ValCurves")
length(FertAll[,1])
length(FertAll[[1]][,1])
P.plot <- ggplot(FertAll[["ValCurves"]], aes(P.K.alpha, P, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
theme_light()#
P.plot
K.plot <- ggplot(FertAll[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
theme_light()#
K.plot
K.plot <- ggplot(FertAll[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
K.plot
colnames(FertAll[["ValCurves"]])
K.plot <- ggplot(FertAll[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
K.plot
K.plot <- ggplot(FertAll[["ValCurves"]], aes(Ca.K.alpha, Ca, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
K.plot
###Fertilizer#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities, F4473ManureLight$Intensities, F4504ManureLight$Intensities)#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values, F4473ManureLight$Values, F4504ManureLight$Values)#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[,1])), rep("F4473", length(F4352ManureLight$Intensities[,1])), rep("F4504", length(F4352ManureLight$Intensities[,1])))#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight), element_predictions(F4473ManureLight), element_predictions(F4504ManureLight))#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[,1])), rep("F4473", length(F4352ManureLight$Values[,1])), rep("F4504", length(F4352ManureLight$Values[,1])))#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")
library(pbapply)#
library(reshape2)#
library(TTR)#
library(plyr)#
library(dplyr)#
library(data.table)#
library(shiny)#
library(ggplot2)#
library(ggtern)#
library(random)#
library(rhandsontable)#
library(random)#
library(Cairo)#
library(gghighlight)#
library(ggmap)#
file.0 <- function(file) {#
    if (length(file) > 0)#
    {#
        return(file)#
    }else{#
        return(levels(file))#
    }#
}#
#
is.0 <- function(cps, file) {#
    file.0 <- function(file) {#
        if (length(file) > 0)#
        {#
            return(file)#
        }else{#
            return(levels(file))#
        }#
    }#
    if (length(cps) > 0)#
    {#
        hope <-data.frame(cps, file.0(file))#
        return(hope)#
    } else {#
        empty <- rep(0, length(file.0(file)))#
        framed <- data.frame(empty, file.0(file))#
        return(framed)#
    }#
}#
elementGrabKalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[6][1,]-0.02 | data$Energy > elementLine[5][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabKbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[7][1,]-0.02 | data$Energy > elementLine[8][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "K-beta", sep=" "))#
    hold.ag#
}#
#
elementGrabLalpha <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[11][1,]-0.02 | data$Energy > elementLine[10][,1]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-alpha", sep=" "))#
    hold.ag#
}#
#
elementGrabLbeta <- function(element, data) {#
    elementLine <- subset(fluorescence.lines, fluorescence.lines$Symbol==element)#
    hold.cps <- subset(data$CPS, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.file <- subset(data$Spectrum, !(data$Energy < elementLine[12][1,]-0.02 | data$Energy > elementLine[14][1,]+0.02))#
    hold.frame <- data.frame(is.0(hold.cps, hold.file))#
    colnames(hold.frame) <- c("Counts", "Spectrum")#
    hold.ag <- aggregate(list(hold.frame$Counts), by=list(hold.frame$Spectrum), FUN="sum")#
    colnames(hold.ag) <- c("Spectrum", paste(element, "L-beta", sep=" "))#
    hold.ag#
}#
#
elementGrab <- function(element.line, data) {#
    element <- strsplit(x=element.line, split="\\.")[[1]][1]#
    destination <- strsplit(x=element.line, split="\\.")[[1]][2]#
    distance <- strsplit(x=element.line, split="\\.")[[1]][3]#
    elementSelection <- if(destination=="K" && distance=="alpha"){#
        elementGrabKalpha(element, data)#
    } else if(destination=="K" && distance=="beta"){#
        elementGrabKbeta(element, data)#
    } else if(destination=="L" && distance=="alpha"){#
        elementGrabLalpha(element, data)#
    } else if (destination=="L" && distance=="beta"){#
        elementGrabLbeta(element, data)#
    }#
    elementSelection#
}#
general.prep <- function(spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    predict.frame <- data.frame(intensity)#
    colnames(predict.frame) <- c("Intensity")#
    predict.intensity <- data.frame(predict.frame$Intensity)#
    colnames(predict.intensity) <- c("Intensity")#
    predict.intensity#
}#
#
simple.tc.prep <- function(data,spectra.line.table, element.line) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    predict.frame.tc <- data.frame(intensity/total.counts$CPS)#
    colnames(predict.frame.tc) <- c("Intensity")#
    predict.intensity.tc <- data.frame(predict.frame.tc$Intensity)#
    colnames(predict.intensity.tc) <- c("Intensity")#
    predict.intensity.tc#
}#
simple.comp.prep <- function(data, spectra.line.table, element.line, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    predict.frame.comp <- data.frame( intensity/compton.frame.ag$Compton)#
    colnames(predict.frame.comp) <- c("Intensity")#
    predict.intensity.comp <- data.frame(predict.frame.comp$Intensity)#
    colnames(predict.intensity.comp) <- c("Intensity")#
    predict.intensity.comp#
}#
###Prep Data#
lukas.simp.prep <- function(spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))#
    colnames(lukas.intercept.table) <- c("first")#
    lukas.intercept <- lukas.intercept.table$first#
    lukas.slope <- data.frame(lukas.slope.table[,slope.element.lines])#
    colnames(lukas.slope) <- slope.element.lines#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept))-lukas.intercept/(intensity+lukas.intercept)),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.frame.luk <- data.frame(((1+intensity/(intensity+lukas.intercept)-lukas.intercept/(intensity+lukas.intercept))),lukas.slope)#
    colnames(predict.frame.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk <- data.frame(predict.frame.luk$Intensity, lukas.slope)#
    colnames(predict.intensity.luk) <- c("Intensity", names(lukas.slope))#
    predict.intensity.luk#
}#
lukas.tc.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines) {#
    intensity <- spectra.line.table[,element.line]#
    total.counts <- aggregate(CPS~Sample, data=data, sum)#
    colnames(total.counts) <- c("Spectrum", "CPS")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.tc <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE))/total.counts$CPS#
    colnames(lukas.intercept.table.tc) <- c("first")#
    lukas.intercept.tc <- lukas.intercept.table.tc$first#
    lukas.slope.tc <- data.frame(lukas.slope.table[,slope.element.lines])/total.counts$CPS#
    colnames(lukas.slope.tc) <- slope.element.lines#
    predict.intensity.luk.tc <- data.frame(((1+intensity/(intensity+lukas.intercept.tc)-lukas.intercept.tc/(intensity+lukas.intercept.tc))),lukas.slope.tc)#
    colnames(predict.intensity.luk.tc) <- c("Intensity", names(lukas.slope.tc))#
    predict.intensity.luk.tc#
}#
lukas.comp.prep <- function(data, spectra.line.table, element.line, slope.element.lines, intercept.element.lines, norm.min, norm.max) {#
    intensity <- spectra.line.table[,element.line]#
    compton.norm <- subset(data$CPS, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.file <- subset(data$Spectrum, !(data$Energy < norm.min | data$Energy > norm.max))#
    compton.frame <- data.frame(is.0(compton.norm, compton.file))#
    colnames(compton.frame) <- c("Compton", "Spectrum")#
    compton.frame.ag <- aggregate(list(compton.frame$Compton), by=list(compton.frame$Spectrum), FUN="sum")#
    colnames(compton.frame.ag) <- c("Spectrum", "Compton")#
    intercept.none <- rep(0, length(spectra.line.table[,1]))#
    lukas.intercept.table.x <- data.frame(spectra.line.table, intercept.none, intercept.none)#
    colnames(lukas.intercept.table.x) <- c(names(spectra.line.table), "None", "NoneNull")#
    slope.none <- rep(1, length(spectra.line.table[,1]))#
    lukas.slope.table <- data.frame(spectra.line.table, slope.none)#
    colnames(lukas.slope.table) <- c(names(spectra.line.table), "None")#
    lukas.intercept.table.comp <- data.frame(rowSums(lukas.intercept.table.x[,c(intercept.element.lines, "None", "NoneNull")], na.rm = TRUE)/compton.frame.ag$Compton)#
    colnames(lukas.intercept.table.comp) <- c("first")#
    lukas.intercept.comp <- lukas.intercept.table.comp$first#
    lukas.slope.comp <- data.frame(lukas.slope.table[,slope.element.lines]/compton.frame.ag$Compton)#
    colnames(lukas.slope.comp) <- slope.element.lines#
    predict.frame.luk.comp <- data.frame(((1+intensity/compton.frame.ag$Compton)/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)-lukas.intercept.comp/(intensity/compton.frame.ag$Compton+lukas.intercept.comp)),lukas.slope.comp)#
    colnames(predict.frame.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp <- data.frame(predict.frame.luk.comp$Intensity, lukas.slope.comp)#
    colnames(predict.intensity.luk.comp) <- c("Intensity", names(lukas.slope.comp))#
    predict.intensity.luk.comp#
}#
generatePredictions <- function(quant_file){#
    element.predictions <- element_predictions(count.table=count.table, the.cal=the.cal, elements=elements, variables=variables, valdata=valdata)#
    return(element.predictions)#
}#
#
element_predictions <- function(quant_file){#
    count.table <- quant_file[["Intensities"]]#
    count.table$Spectrum <- quant_file[["Values"]]["Spectrum"][,1]#
    the.cal <- quant_file[["calList"]]#
    elements <- names(quant_file[["calList"]])#
    variables <- ls(quant_file[["Intensities"]])#
    valdata <- quant_file[["Spectra"]]#
    predicted.list <- pblapply(elements, function (x)#
    if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Spectra" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=general.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x)#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==2) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType!=3 && the.cal[[x]][[1]]$CalTable$NormType==3) {#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=simple.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==1){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.simp.prep.net(#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==2){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.tc.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept#
        )#
        )#
    } else if(quant_file$FileType=="Net" && the.cal[[x]][[1]]$CalTable$CalType==3 && the.cal[[x]][[1]]$CalTable$NormType==3){#
        predict(#
        object=the.cal[[x]][[2]],#
        newdata=lukas.comp.prep.net(#
        data=valdata,#
        spectra.line.table=as.data.frame(#
        count.table#
        ),#
        element.line=x,#
        slope.element.lines=the.cal[[x]][[1]][2]$Slope,#
        intercept.element.lines=the.cal[[x]][[1]][3]$Intercept,#
        norm.min=the.cal[[x]][[1]][1]$CalTable$Min,#
        norm.max=the.cal[[x]][[1]][1]$CalTable$Max#
        )#
        )#
    }, cl=6L#
    )#
    predicted.vector <- unlist(predicted.list)#
    dim(predicted.vector) <- c(length(count.table$Spectrum), length(elements))#
    predicted.frame <- data.frame(count.table$Spectrum, predicted.vector)#
    colnames(predicted.frame) <- c("Spectrum",  elements)#
    #predicted.data.table <- data.table(predicted.frame)#
    #predicted.values <- t(predicted.values)#
    #predicted.data.table#
    return(predicted.frame)#
}#
###900F4352#
F4352FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352FertAll.quant")#
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")#
F4352ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureTrace.quant")#
F4352PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantLight.quant")#
F4352PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352PlantTrace.quant")#
F4352SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilLight.quant")#
F4352SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352SoilTrace.quant")#
#
###900F4473#
F4473FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473FertAll.quant")#
F4473ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureLight.quant")#
F4473ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473ManureTrace.quant")#
F4473PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantLight.quant")#
F4473PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473PlantTrace.quant")#
F4473SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilLight.quant")#
F4473SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4473 Cal/R Cals/900F4473SoilTrace.quant")#
#
###900F4504#
F4504FertAll <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504FertAll.quant")#
F4504ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureLight.quant")#
F4504ManureTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504ManureTrace.quant")#
F4504PlantLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantLight.quant")#
F4504PlantTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504PlantTrace.quant")#
F4504SoilLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilLight.quant")#
F4504SoilTrace <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4504 Cal/R Cals/900F4504SoilTrace.quant")#
###Fertilizer#
FertAllIntensities <- rbind(F4352FertAll$Intensities, F4473FertAll$Intensities, F4504FertAll$Intensities)#
FertAllIntensities$Spectrum <- c(F4352FertAll[["Values"]]["Spectrum"][,1], F4473FertAll[["Values"]]["Spectrum"][,1], F4504FertAll[["Values"]]["Spectrum"][,1])#
FertAllIntensities$.id <- seq(1, length(FertAllIntensities[,1]), 1)#
#
FertAllValues <- rbind(F4352FertAll$Values, F4473FertAll$Values, F4504FertAll$Values)#
colnames(FertAllValues) <- gsub("*.K.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.alpha", "", colnames(FertAllValues))#
colnames(FertAllValues) <- gsub("*.L.beta", "", colnames(FertAllValues))#
FertAllValues$.id <- seq(1, length(FertAllValues[,1]), 1)#
FertAllCalCurves <- merge(FertAllIntensities, FertAllValues, by=".id")#
FertAllCalCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Intensities[,1])), rep("F4473", length(F4352FertAll$Intensities[,1])), rep("F4504", length(F4352FertAll$Intensities[,1])))#
#
FertAllPredictions <- rbind(element_predictions(F4352FertAll), element_predictions(F4473FertAll), element_predictions(F4504FertAll))#
FertAllPredictions$.id <- seq(1, length(FertAllPredictions[,1]), 1)#
FertAllValCurves <- merge(FertAllPredictions, FertAllValues, by=".id")#
FertAllValCurves$Instrument <- c(rep("F4352", length(F4352FertAll$Values[,1])), rep("F4473", length(F4352FertAll$Values[,1])), rep("F4504", length(F4352FertAll$Values[,1])))#
#
FertAll <- list(FertAllCalCurves, FertAllValCurves)#
names(FertAll) <- c("CalCurves", "ValCurves")#
#
###Manure Light#
ManureLightIntensities <- rbind(F4352ManureLight$Intensities, F4473ManureLight$Intensities, F4504ManureLight$Intensities)#
ManureLightIntensities$Spectrum <- c(F4352ManureLight[["Values"]]["Spectrum"][,1], F4473ManureLight[["Values"]]["Spectrum"][,1], F4504ManureLight[["Values"]]["Spectrum"][,1])#
ManureLightIntensities$.id <- seq(1, length(ManureLightIntensities[,1]), 1)#
#
ManureLightValues <- rbind(F4352ManureLight$Values, F4473ManureLight$Values, F4504ManureLight$Values)#
colnames(ManureLightValues) <- gsub("*.K.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.alpha", "", colnames(ManureLightValues))#
colnames(ManureLightValues) <- gsub("*.L.beta", "", colnames(ManureLightValues))#
ManureLightValues$.id <- seq(1, length(ManureLightValues[,1]), 1)#
ManureLightCalCurves <- merge(ManureLightIntensities, ManureLightValues, by=".id")#
ManureLightCalCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Intensities[,1])), rep("F4473", length(F4352ManureLight$Intensities[,1])), rep("F4504", length(F4352ManureLight$Intensities[,1])))#
#
ManureLightPredictions <- rbind(element_predictions(F4352ManureLight), element_predictions(F4473ManureLight), element_predictions(F4504ManureLight))#
ManureLightPredictions$.id <- seq(1, length(ManureLightPredictions[,1]), 1)#
ManureLightValCurves <- merge(ManureLightPredictions, ManureLightValues, by=".id")#
ManureLightValCurves$Instrument <- c(rep("F4352", length(F4352ManureLight$Values[,1])), rep("F4473", length(F4352ManureLight$Values[,1])), rep("F4504", length(F4352ManureLight$Values[,1])))#
#
ManureLight <- list(ManureLightCalCurves, ManureLightValCurves)#
names(ManureLight) <- c("CalCurves", "ValCurves")#
#
###Manure Trace#
ManureTraceIntensities <- rbind(F4352ManureTrace$Intensities, F4473ManureTrace$Intensities, F4504ManureTrace$Intensities)#
ManureTraceIntensities$Spectrum <- c(F4352ManureTrace[["Values"]]["Spectrum"][,1], F4473ManureTrace[["Values"]]["Spectrum"][,1], F4504ManureTrace[["Values"]]["Spectrum"][,1])#
ManureTraceIntensities$.id <- seq(1, length(ManureTraceIntensities[,1]), 1)#
#
ManureTraceValues <- rbind(F4352ManureTrace$Values, F4473ManureTrace$Values, F4504ManureTrace$Values)#
colnames(ManureTraceValues) <- gsub("*.K.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.alpha", "", colnames(ManureTraceValues))#
colnames(ManureTraceValues) <- gsub("*.L.beta", "", colnames(ManureTraceValues))#
ManureTraceValues$.id <- seq(1, length(ManureTraceValues[,1]), 1)#
ManureTraceCalCurves <- merge(ManureTraceIntensities, ManureTraceValues, by=".id")#
ManureTraceCalCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Intensities[,1])), rep("F4473", length(F4352ManureTrace$Intensities[,1])), rep("F4504", length(F4352ManureTrace$Intensities[,1])))#
#
ManureTracePredictions <- rbind(element_predictions(F4352ManureTrace), element_predictions(F4473ManureTrace), element_predictions(F4504ManureTrace))#
ManureTracePredictions$.id <- seq(1, length(ManureTracePredictions[,1]), 1)#
ManureTraceValCurves <- merge(ManureTracePredictions, ManureTraceValues, by=".id")#
ManureTraceValCurves$Instrument <- c(rep("F4352", length(F4352ManureTrace$Values[,1])), rep("F4473", length(F4352ManureTrace$Values[,1])), rep("F4504", length(F4352ManureTrace$Values[,1])))#
#
ManureTrace <- list(ManureTraceCalCurves, ManureTraceValCurves)#
names(ManureTrace) <- c("CalCurves", "ValCurves")#
#
###Plant Light#
PlantLightIntensities <- rbind(F4352PlantLight$Intensities, F4473PlantLight$Intensities, F4504PlantLight$Intensities)#
PlantLightIntensities$Spectrum <- c(F4352PlantLight[["Values"]]["Spectrum"][,1], F4473PlantLight[["Values"]]["Spectrum"][,1], F4504PlantLight[["Values"]]["Spectrum"][,1])#
PlantLightIntensities$.id <- seq(1, length(PlantLightIntensities[,1]), 1)#
#
PlantLightValues <- rbind(F4352PlantLight$Values, F4473PlantLight$Values, F4504PlantLight$Values)#
colnames(PlantLightValues) <- gsub("*.K.alpha", "", colnames(PlantLightValues))#
colnames(PlantLightValues) <- gsub("*.L.alpha", "", colnames(PlantLightValues))#
colnames(PlantLightValues) <- gsub("*.L.beta", "", colnames(PlantLightValues))#
PlantLightValues$.id <- seq(1, length(PlantLightValues[,1]), 1)#
PlantLightCalCurves <- merge(PlantLightIntensities, PlantLightValues, by=".id")#
PlantLightCalCurves$Instrument <- c(rep("F4352", length(F4352PlantLight$Intensities[,1])), rep("F4473", length(F4352PlantLight$Intensities[,1])), rep("F4504", length(F4352PlantLight$Intensities[,1])))#
#
PlantLightPredictions <- rbind(element_predictions(F4352PlantLight), element_predictions(F4473PlantLight), element_predictions(F4504PlantLight))#
PlantLightPredictions$.id <- seq(1, length(PlantLightPredictions[,1]), 1)#
PlantLightValCurves <- merge(PlantLightPredictions, PlantLightValues, by=".id")#
PlantLightValCurves$Instrument <- c(rep("F4352", length(F4352PlantLight$Values[,1])), rep("F4473", length(F4352PlantLight$Values[,1])), rep("F4504", length(F4352PlantLight$Values[,1])))#
#
PlantLight <- list(PlantLightCalCurves, PlantLightValCurves)#
names(PlantLight) <- c("CalCurves", "ValCurves")#
#
###Plant Trace#
PlantTraceIntensities <- rbind(F4352PlantTrace$Intensities, F4473PlantTrace$Intensities, F4504PlantTrace$Intensities)#
PlantTraceIntensities$Spectrum <- c(F4352PlantTrace[["Values"]]["Spectrum"][,1], F4473PlantTrace[["Values"]]["Spectrum"][,1], F4504PlantTrace[["Values"]]["Spectrum"][,1])#
PlantTraceIntensities$.id <- seq(1, length(PlantTraceIntensities[,1]), 1)#
#
PlantTraceValues <- rbind(F4352PlantTrace$Values, F4473PlantTrace$Values, F4504PlantTrace$Values)#
colnames(PlantTraceValues) <- gsub("*.K.alpha", "", colnames(PlantTraceValues))#
colnames(PlantTraceValues) <- gsub("*.L.alpha", "", colnames(PlantTraceValues))#
colnames(PlantTraceValues) <- gsub("*.L.beta", "", colnames(PlantTraceValues))#
PlantTraceValues$.id <- seq(1, length(PlantTraceValues[,1]), 1)#
PlantTraceCalCurves <- merge(PlantTraceIntensities, PlantTraceValues, by=".id")#
PlantTraceCalCurves$Instrument <- c(rep("F4352", length(F4352PlantTrace$Intensities[,1])), rep("F4473", length(F4352PlantTrace$Intensities[,1])), rep("F4504", length(F4352PlantTrace$Intensities[,1])))#
#
PlantTracePredictions <- rbind(element_predictions(F4352PlantTrace), element_predictions(F4473PlantTrace), element_predictions(F4504PlantTrace))#
PlantTracePredictions$.id <- seq(1, length(PlantTracePredictions[,1]), 1)#
PlantTraceValCurves <- merge(PlantTracePredictions, PlantTraceValues, by=".id")#
PlantTraceValCurves$Instrument <- c(rep("F4352", length(F4352PlantTrace$Values[,1])), rep("F4473", length(F4352PlantTrace$Values[,1])), rep("F4504", length(F4352PlantTrace$Values[,1])))#
#
PlantTrace <- list(PlantTraceCalCurves, PlantTraceValCurves)#
names(PlantTrace) <- c("CalCurves", "ValCurves")#
###Soil Light#
SoilLightIntensities <- rbind(F4352SoilLight$Intensities, F4473SoilLight$Intensities, F4504SoilLight$Intensities)#
SoilLightIntensities$Spectrum <- c(F4352SoilLight[["Values"]]["Spectrum"][,1], F4473SoilLight[["Values"]]["Spectrum"][,1], F4504SoilLight[["Values"]]["Spectrum"][,1])#
SoilLightIntensities$.id <- seq(1, length(SoilLightIntensities[,1]), 1)#
#
SoilLightValues <- rbind(F4352SoilLight$Values, F4473SoilLight$Values, F4504SoilLight$Values)#
colnames(SoilLightValues) <- gsub("*.K.alpha", "", colnames(SoilLightValues))#
colnames(SoilLightValues) <- gsub("*.L.alpha", "", colnames(SoilLightValues))#
colnames(SoilLightValues) <- gsub("*.L.beta", "", colnames(SoilLightValues))#
SoilLightValues$.id <- seq(1, length(SoilLightValues[,1]), 1)#
SoilLightCalCurves <- merge(SoilLightIntensities, SoilLightValues, by=".id")#
SoilLightCalCurves$Instrument <- c(rep("F4352", length(F4352SoilLight$Intensities[,1])), rep("F4473", length(F4352SoilLight$Intensities[,1])), rep("F4504", length(F4352SoilLight$Intensities[,1])))#
#
SoilLightPredictions <- rbind(element_predictions(F4352SoilLight), element_predictions(F4473SoilLight), element_predictions(F4504SoilLight))#
SoilLightPredictions$.id <- seq(1, length(SoilLightPredictions[,1]), 1)#
SoilLightValCurves <- merge(SoilLightPredictions, SoilLightValues, by=".id")#
SoilLightValCurves$Instrument <- c(rep("F4352", length(F4352SoilLight$Values[,1])), rep("F4473", length(F4352SoilLight$Values[,1])), rep("F4504", length(F4352SoilLight$Values[,1])))#
#
SoilLight <- list(SoilLightCalCurves, SoilLightValCurves)#
names(SoilLight) <- c("CalCurves", "ValCurves")#
###Soil Trace#
SoilTraceIntensities <- rbind(F4352SoilTrace$Intensities, F4473SoilTrace$Intensities, F4504SoilTrace$Intensities)#
SoilTraceIntensities$Spectrum <- c(F4352SoilTrace[["Values"]]["Spectrum"][,1], F4473SoilTrace[["Values"]]["Spectrum"][,1], F4504SoilTrace[["Values"]]["Spectrum"][,1])#
SoilTraceIntensities$.id <- seq(1, length(SoilTraceIntensities[,1]), 1)#
#
SoilTraceValues <- rbind(F4352SoilTrace$Values, F4473SoilTrace$Values, F4504SoilTrace$Values)#
colnames(SoilTraceValues) <- gsub("*.K.alpha", "", colnames(SoilTraceValues))#
colnames(SoilTraceValues) <- gsub("*.L.alpha", "", colnames(SoilTraceValues))#
colnames(SoilTraceValues) <- gsub("*.L.beta", "", colnames(SoilTraceValues))#
SoilTraceValues$.id <- seq(1, length(SoilTraceValues[,1]), 1)#
SoilTraceCalCurves <- merge(SoilTraceIntensities, SoilTraceValues, by=".id")#
SoilTraceCalCurves$Instrument <- c(rep("F4352", length(F4352SoilTrace$Intensities[,1])), rep("F4473", length(F4352SoilTrace$Intensities[,1])), rep("F4504", length(F4352SoilTrace$Intensities[,1])))#
#
SoilTracePredictions <- rbind(element_predictions(F4352SoilTrace), element_predictions(F4473SoilTrace), element_predictions(F4504SoilTrace))#
SoilTracePredictions$.id <- seq(1, length(SoilTracePredictions[,1]), 1)#
SoilTraceValCurves <- merge(SoilTracePredictions, SoilTraceValues, by=".id")#
SoilTraceValCurves$Instrument <- c(rep("F4352", length(F4352SoilTrace$Values[,1])), rep("F4473", length(F4352SoilTrace$Values[,1])), rep("F4504", length(F4352SoilTrace$Values[,1])))#
#
SoilTrace <- list(SoilTraceCalCurves, SoilTraceValCurves)#
names(SoilTrace) <- c("CalCurves", "ValCurves")#
K.plot <- ggplot(FertAll[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
K.plot
###Manure Plots#
#
Cr.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Chromium ppm XRF") +#
scale_y_continuous("Chromium ppm ICP-MS") +#
theme_light()#
Cr.plot
P.plot <- ggplot(ManureTrace[["ValCurves"]], aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Phopsphorous ppm XRF") +#
scale_y_continuous("Phopsphorous ppm ICP-MS") +#
theme_light()#
P.plot
P.plot <- ggplot(ManureLight[["ValCurves"]], aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Phopsphorous ppm XRF") +#
scale_y_continuous("Phopsphorous ppm ICP-MS") +#
theme_light()#
P.plot
S.plot <- ggplot(ManureLight[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
S.plot
?stat_smooth
?stat_line
?geom_line
S.plot <- ggplot(ManureLight[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
geom_line(method="lm") +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
S.plot
S.plot <- ggplot(ManureLight[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_line(method="lm") +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
S.plot
?geom_line
?stat_smoth
?stat_smooth
S.plot <- ggplot(ManureLight[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
S.plot
Ca.plot <- ggplot(ManureLight[["ValCurves"]], aes(Ca.K.alpha*10000, Ca*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium ppm XRF") +#
scale_y_continuous("Calcium ppm ICP-MS") +#
theme_light()#
Ca.plot
Ca.plot <- ggplot(ManureLight[["ValCurves"]], aes(Ca.K.alpha, Ca, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium % XRF") +#
scale_y_continuous("Calcium % ICP-MS") +#
theme_light()#
Ca.plot
Zn.plot <- ggplot(ManureLight[["ValCurves"]], aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium ppm XRF") +#
scale_y_continuous("Calcium ppm ICP-MS") +#
theme_light()#
Zn.plot
Zn.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium ppm XRF") +#
scale_y_continuous("Calcium ppm ICP-MS") +#
theme_light()#
Zn.plot
Zn.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Zinc ppm XRF") +#
scale_y_continuous("Zinc ppm ICP-MS") +#
theme_light()#
Zn.plot
Mo.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Mo.K.alpha*10000, Mo*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Molybdenum ppm XRF") +#
scale_y_continuous("Molybdenum ppm ICP-MS") +#
theme_light()#
Mo.plot
Cu.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Cu.K.alpha*10000, Cu*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Copper ppm XRF") +#
scale_y_continuous("Copper ppm ICP-MS") +#
theme_light()#
Cu.plot
?scale_x_continuous
ls(ManureTrace[["ValCurves"]])
Se.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Se.K.alpha*10000, Se*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Selenium ppm XRF") +#
scale_y_continuous("Selenium ppm ICP-MS") +#
theme_light()#
Se.plot
As.plot <- ggplot(ManureTrace[["ValCurves"]], aes(As.K.alpha*10000, As*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Arsenic ppm XRF") +#
scale_y_continuous("Arsenic ppm ICP-MS") +#
theme_light()#
As.plot
Fe.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Fe.K.alpha*10000, Fe*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Iron ppm XRF") +#
scale_y_continuous("Iron ppm ICP-MS") +#
theme_light()#
Fe.plot
Fe.plot
Mn.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Mn.K.alpha*10000, Mn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Manganese ppm XRF") +#
scale_y_continuous("Manganese ppm ICP-MS") +#
theme_light()#
Mn.plot
Mn.plot
Pb.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Pb.L.beta*10000, Pb*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Lead ppm XRF") +#
scale_y_continuous("Lead ppm ICP-MS") +#
theme_light()#
Pb.plot
Pb.plot
> ls(ManureLight[["ValCurves"]])
ls(ManureLight[["ValCurves"]])
Na.plot <- ggplot(ManureLight[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
theme_light()#
Mg.plot <- ggplot(ManureLight[["ValCurves"]], aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Magnesium ppm XRF") +#
scale_y_continuous("Magnesium ppm ICP-MS") +#
theme_light()#
Al.plot <- ggplot(ManureLight[["ValCurves"]], aes(Al.K.alpha*10000, Al*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Aluminum ppm XRF") +#
scale_y_continuous("Aluminum ppm ICP-MS") +#
theme_light()#
#
P.plot <- ggplot(ManureLight[["ValCurves"]], aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Phosphorous ppm XRF") +#
scale_y_continuous("Phosphorous ppm ICP-MS") +#
theme_light()#
S.plot <- ggplot(ManureLight[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
#
Cl.plot <- ggplot(ManureLight[["ValCurves"]], aes(Cl.K.alpha*10000, Cl*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Chlorine ppm XRF") +#
scale_y_continuous("Chlorine ppm ICP-MS") +#
theme_light()#
#
K.plot <- ggplot(ManureLight[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
Ca.plot <- ggplot(ManureLight[["ValCurves"]], aes(Ca.K.alpha, Ca, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium % XRF") +#
scale_y_continuous("Calcium % ICP-MS") +#
theme_light()#
#
Ti.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Ti.K.alpha*10000, Ti*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Titanium ppm XRF") +#
scale_y_continuous("Titanium ppm ICP-MS") +#
theme_light()#
Cr.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Chromium ppm XRF") +#
scale_y_continuous("Chromium ppm ICP-MS") +#
theme_light()#
Mn.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Mn.K.alpha*10000, Mn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Manganese ppm XRF") +#
scale_y_continuous("Manganese ppm ICP-MS") +#
theme_light()#
Fe.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Fe.K.alpha*10000, Fe*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Iron ppm XRF") +#
scale_y_continuous("Iron ppm ICP-MS") +#
theme_light()#
Co.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Co.K.alpha*10000, Co*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cobalt ppm XRF") +#
scale_y_continuous("Cobalt ppm ICP-MS") +#
theme_light()#
Ni.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Ni.K.alpha*10000, Ni*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Nickel ppm XRF") +#
scale_y_continuous("Nickel ppm ICP-MS") +#
theme_light()#
Cu.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Cu.K.alpha*10000, Cu*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Copper ppm XRF") +#
scale_y_continuous("Copper ppm ICP-MS") +#
theme_light()#
Zn.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Zinc ppm XRF") +#
scale_y_continuous("Zinc ppm ICP-MS") +#
theme_light()#
#
As.plot <- ggplot(ManureTrace[["ValCurves"]], aes(As.K.alpha*10000, As*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Arsenic ppm XRF") +#
scale_y_continuous("Arsenic ppm ICP-MS") +#
theme_light()#
Se.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Se.K.alpha*10000, Se*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Selenium ppm XRF") +#
scale_y_continuous("Selenium ppm ICP-MS") +#
theme_light()#
#
Mo.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Mo.K.alpha*10000, Mo*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Molybdenum ppm XRF") +#
scale_y_continuous("Molybdenum ppm ICP-MS") +#
theme_light()#
#
Cd.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Cd.K.alpha*10000, Cd*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cadmium ppm XRF") +#
scale_y_continuous("Cadmium ppm ICP-MS") +#
theme_light()#
#
Pb.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Pb.L.beta*10000, Pb*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Lead ppm XRF") +#
scale_y_continuous("Lead ppm ICP-MS") +#
theme_light()#
plot.list <- list(Na.plot, Mg.plot, Al.plot, P.plot, S.plot, Cl.plot, K.plot, Ca.plot, Ti.plot, Cr.plot, Mn.plot, Fe.plot, Co.plot, Ni.plot, Cu.plot, Zn.plot, Mo.plot, Cd.plot, Pb.plot,)#
content = function(file) {#
    pdf(file = file, width=25, height=20)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCal.pdf")
plot.list <- list(Na.plot, Mg.plot, Al.plot, P.plot, S.plot, Cl.plot, K.plot, Ca.plot, Ti.plot, Cr.plot, Mn.plot, Fe.plot, Co.plot, Ni.plot, Cu.plot, Zn.plot, Mo.plot, Cd.plot, Pb.plot)#
content = function(file) {#
    pdf(file = file, width=25, height=20)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCal.pdf")
plot.list <- list(Na.plot, Mg.plot, Al.plot, P.plot, S.plot, K.plot, Ca.plot, Ti.plot, Cr.plot, Mn.plot, Fe.plot, Co.plot, Ni.plot, Cu.plot, Zn.plot, Mo.plot, Cd.plot, Pb.plot)#
content = function(file) {#
    pdf(file = file, width=25, height=20)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCal.pdf")
content = function(file) {#
    pdf(file = file, width=12, height=7)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCal.pdf")
ls(PlantTrace[["ValCurves"]])
plot.list <- list(Na.plot, Mg.plot, Al.plot, P.plot, S.plot, K.plot, Ca.plot, Ti.plot, Cr.plot, Mn.plot, Fe.plot, Co.plot, Ni.plot, Cu.plot, Zn.plot, As.plot, Se.plot, Mo.plot, Cd.plot, Pb.plot)#
content = function(file) {#
    pdf(file = file, width=12, height=7)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ManureCal.pdf")
#Plants#
#
Na.plot <- ggplot(PlantLight[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
theme_light()#
Mg.plot <- ggplot(PlantLight[["ValCurves"]], aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Magnesium ppm XRF") +#
scale_y_continuous("Magnesium ppm ICP-MS") +#
theme_light()#
Al.plot <- ggplot(PlantLight[["ValCurves"]], aes(Al.K.alpha*10000, Al*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Aluminum ppm XRF") +#
scale_y_continuous("Aluminum ppm ICP-MS") +#
theme_light()#
#
P.plot <- ggplot(PlantLight[["ValCurves"]], aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Phosphorous ppm XRF") +#
scale_y_continuous("Phosphorous ppm ICP-MS") +#
theme_light()#
S.plot <- ggplot(PlantLight[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
#
Cl.plot <- ggplot(PlantLight[["ValCurves"]], aes(Cl.K.alpha*10000, Cl*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Chlorine ppm XRF") +#
scale_y_continuous("Chlorine ppm ICP-MS") +#
theme_light()#
K.plot <- ggplot(PlantLight[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
Ca.plot <- ggplot(PlantLight[["ValCurves"]], aes(Ca.K.alpha, Ca, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium % XRF") +#
scale_y_continuous("Calcium % ICP-MS") +#
theme_light()#
#
Ti.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Ti.K.alpha*10000, Ti*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Titanium ppm XRF") +#
scale_y_continuous("Titanium ppm ICP-MS") +#
theme_light()#
V.plot <- ggplot(PlantTrace[["ValCurves"]], aes(V.K.alpha*10000, V*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Vanadium ppm XRF") +#
scale_y_continuous("Vanadium ppm ICP-MS") +#
theme_light()#
Cr.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Chromium ppm XRF") +#
scale_y_continuous("Chromium ppm ICP-MS") +#
theme_light()#
Mn.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Mn.K.alpha*10000, Mn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Manganese ppm XRF") +#
scale_y_continuous("Manganese ppm ICP-MS") +#
theme_light()#
Fe.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Fe.K.alpha*10000, Fe*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Iron ppm XRF") +#
scale_y_continuous("Iron ppm ICP-MS") +#
theme_light()#
Co.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Co.K.alpha*10000, Co*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cobalt ppm XRF") +#
scale_y_continuous("Cobalt ppm ICP-MS") +#
theme_light()#
Ni.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Ni.K.alpha*10000, Ni*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Nickel ppm XRF") +#
scale_y_continuous("Nickel ppm ICP-MS") +#
theme_light()#
Cu.plot <- ggplot(ManureTrace[["ValCurves"]], aes(Cu.K.alpha*10000, Cu*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Copper ppm XRF") +#
scale_y_continuous("Copper ppm ICP-MS") +#
theme_light()#
Zn.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Zinc ppm XRF") +#
scale_y_continuous("Zinc ppm ICP-MS") +#
theme_light()#
#
As.plot <- ggplot(PlantTrace[["ValCurves"]], aes(As.K.alpha*10000, As*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Arsenic ppm XRF") +#
scale_y_continuous("Arsenic ppm ICP-MS") +#
theme_light()#
#
Se.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Se.K.alpha*10000, Se*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Selenium ppm XRF") +#
scale_y_continuous("Selenium ppm ICP-MS") +#
theme_light()#
Br.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Br.K.alpha*10000, Br*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Bromium ppm XRF") +#
scale_y_continuous("Bromium ppm ICP-MS") +#
theme_light()#
Rb.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Rb.K.alpha*10000, Rb*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Rubidium ppm XRF") +#
scale_y_continuous("Rubidium ppm ICP-MS") +#
theme_light()#
Sr.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Sr.K.alpha*10000, Sr*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Strontium ppm XRF") +#
scale_y_continuous("Strontium ppm ICP-MS") +#
theme_light()#
Mo.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Mo.K.alpha*10000, Mo*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Molybdenum ppm XRF") +#
scale_y_continuous("Molybdenum ppm ICP-MS") +#
theme_light()#
Cd.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Cd.K.alpha*10000, Cd*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cadmium ppm XRF") +#
scale_y_continuous("Cadmium ppm ICP-MS") +#
theme_light()#
Ba.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Ba.L.alpha*10000, Ba*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Barium ppm XRF") +#
scale_y_continuous("Barium ppm ICP-MS") +#
theme_light()#
Hg.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Hg.L.alpha*10000, Hg*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Mercury ppm XRF") +#
scale_y_continuous("Mercury ppm ICP-MS") +#
theme_light()#
Pb.plot <- ggplot(PlantTrace[["ValCurves"]], aes(Pb.L.beta*10000, Pb*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Lead ppm XRF") +#
scale_y_continuous("Lead ppm ICP-MS") +#
theme_light()#
plot.list <- list(Na.plot, Mg.plot, Al.plot, P.plot, S.plot, Cl.plot, K.plot, Ca.plot, Ti.plot, V.plot, Cr.plot, Mn.plot, Fe.plot, Co.plot, Ni.plot, Cu.plot, Zn.plot, As.plot, Br.plot, Rb.plot, Sr.plot, Mo.plot, Cd.plot, Ba.plot, Hg.plot, Pb.plot)#
content = function(file) {#
    pdf(file = file, width=12, height=7)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/PlantCal.pdf")
ls(AllFert[["ValCurves"]])
ls(Fertall[["ValCurves"]])
ls(FertAll[["ValCurves"]])
Na.plot <- ggplot(FertAll[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
theme_light()#
Mg.plot <- ggplot(FertAll[["ValCurves"]], aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Magnesium ppm XRF") +#
scale_y_continuous("Magnesium ppm ICP-MS") +#
theme_light()#
Al.plot <- ggplot(FertAll[["ValCurves"]], aes(Al.K.alpha*10000, Al*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Aluminum ppm XRF") +#
scale_y_continuous("Aluminum ppm ICP-MS") +#
theme_light()#
#
P.plot <- ggplot(FertAll[["ValCurves"]], aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Phosphorous ppm XRF") +#
scale_y_continuous("Phosphorous ppm ICP-MS") +#
theme_light()#
S.plot <- ggplot(FertAll[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
K.plot <- ggplot(FertAll[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
Ca.plot <- ggplot(FertAll[["ValCurves"]], aes(Ca.K.alpha, Ca, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium % XRF") +#
scale_y_continuous("Calcium % ICP-MS") +#
theme_light()#
#
Ti.plot <- ggplot(FertAll[["ValCurves"]], aes(Ti.K.alpha*10000, Ti*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Titanium ppm XRF") +#
scale_y_continuous("Titanium ppm ICP-MS") +#
theme_light()#
Cr.plot <- ggplot(FertAll[["ValCurves"]], aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Chromium ppm XRF") +#
scale_y_continuous("Chromium ppm ICP-MS") +#
theme_light()#
Mn.plot <- ggplot(FertAll[["ValCurves"]], aes(Mn.K.alpha*10000, Mn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Manganese ppm XRF") +#
scale_y_continuous("Manganese ppm ICP-MS") +#
theme_light()#
Fe.plot <- ggplot(FertAll[["ValCurves"]], aes(Fe.K.alpha*10000, Fe*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Iron ppm XRF") +#
scale_y_continuous("Iron ppm ICP-MS") +#
theme_light()#
Co.plot <- ggplot(FertAll[["ValCurves"]], aes(Co.K.alpha*10000, Co*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cobalt ppm XRF") +#
scale_y_continuous("Cobalt ppm ICP-MS") +#
theme_light()#
Ni.plot <- ggplot(FertAll[["ValCurves"]], aes(Ni.K.alpha*10000, Ni*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Nickel ppm XRF") +#
scale_y_continuous("Nickel ppm ICP-MS") +#
theme_light()#
Cu.plot <- ggplot(FertAll[["ValCurves"]], aes(Cu.K.alpha*10000, Cu*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Copper ppm XRF") +#
scale_y_continuous("Copper ppm ICP-MS") +#
theme_light()#
Zn.plot <- ggplot(FertAll[["ValCurves"]], aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Zinc ppm XRF") +#
scale_y_continuous("Zinc ppm ICP-MS") +#
theme_light()#
#
As.plot <- ggplot(FertAll[["ValCurves"]], aes(As.K.alpha*10000, As*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Arsenic ppm XRF") +#
scale_y_continuous("Arsenic ppm ICP-MS") +#
theme_light()#
Se.plot <- ggplot(FertAll[["ValCurves"]], aes(Se.K.alpha*10000, Se*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Selenium ppm XRF") +#
scale_y_continuous("Selenium ppm ICP-MS") +#
theme_light()#
#
Mo.plot <- ggplot(FertAll[["ValCurves"]], aes(Mo.K.alpha*10000, Mo*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Molybdenum ppm XRF") +#
scale_y_continuous("Molybdenum ppm ICP-MS") +#
theme_light()#
#
Cd.plot <- ggplot(FertAll[["ValCurves"]], aes(Cd.K.alpha*10000, Cd*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cadmium ppm XRF") +#
scale_y_continuous("Cadmium ppm ICP-MS") +#
theme_light()#
#
Pb.plot <- ggplot(FertAll[["ValCurves"]], aes(Pb.L.beta*10000, Pb*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Lead ppm XRF") +#
scale_y_continuous("Lead ppm ICP-MS") +#
theme_light()#
plot.list <- list(Na.plot, Mg.plot, Al.plot, P.plot, S.plot, K.plot, Ca.plot, Ti.plot, Cr.plot, Mn.plot, Fe.plot, Co.plot, Ni.plot, Cu.plot, Zn.plot, As.plot, Se.plot, Mo.plot, Cd.plot, Pb.plot)#
content = function(file) {#
    pdf(file = file, width=12, height=7)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/FertilizerCal.pdf")
####Soil Plots#
Na.plot <- ggplot(SoilLight[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
theme_light()#
Mg.plot <- ggplot(SoilLight[["ValCurves"]], aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Magnesium ppm XRF") +#
scale_y_continuous("Magnesium ppm ICP-MS") +#
theme_light()#
Al.plot <- ggplot(SoilLight[["ValCurves"]], aes(Al.K.alpha*10000, Al*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Aluminum ppm XRF") +#
scale_y_continuous("Aluminum ppm ICP-MS") +#
theme_light()#
#
P.plot <- ggplot(SoilLight[["ValCurves"]], aes(P.K.alpha*10000, P*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Phosphorous ppm XRF") +#
scale_y_continuous("Phosphorous ppm ICP-MS") +#
theme_light()#
S.plot <- ggplot(SoilLight[["ValCurves"]], aes(S.K.alpha*10000, S*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sulfur ppm XRF") +#
scale_y_continuous("Sulfur ppm ICP-MS") +#
theme_light()#
K.plot <- ggplot(SoilLight[["ValCurves"]], aes(K.K.alpha, K, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Potassium % XRF") +#
scale_y_continuous("Potassium % ICP-MS") +#
theme_light()#
Ca.plot <- ggplot(SoilLight[["ValCurves"]], aes(Ca.K.alpha, Ca, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Calcium % XRF") +#
scale_y_continuous("Calcium % ICP-MS") +#
theme_light()#
#
Ti.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Ti.K.alpha*10000, Ti*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Titanium ppm XRF") +#
scale_y_continuous("Titanium ppm ICP-MS") +#
theme_light()#
Cr.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Cr.K.alpha*10000, Cr*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Chromium ppm XRF") +#
scale_y_continuous("Chromium ppm ICP-MS") +#
theme_light()#
Mn.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Mn.K.alpha*10000, Mn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Manganese ppm XRF") +#
scale_y_continuous("Manganese ppm ICP-MS") +#
theme_light()#
Fe.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Fe.K.alpha*10000, Fe*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Iron ppm XRF") +#
scale_y_continuous("Iron ppm ICP-MS") +#
theme_light()#
Co.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Co.K.alpha*10000, Co*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cobalt ppm XRF") +#
scale_y_continuous("Cobalt ppm ICP-MS") +#
theme_light()#
Ni.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Ni.K.alpha*10000, Ni*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Nickel ppm XRF") +#
scale_y_continuous("Nickel ppm ICP-MS") +#
theme_light()#
Cu.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Cu.K.alpha*10000, Cu*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Copper ppm XRF") +#
scale_y_continuous("Copper ppm ICP-MS") +#
theme_light()#
Zn.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Zn.K.alpha*10000, Zn*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Zinc ppm XRF") +#
scale_y_continuous("Zinc ppm ICP-MS") +#
theme_light()#
#
As.plot <- ggplot(SoilTrace[["ValCurves"]], aes(As.K.alpha*10000, As*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Arsenic ppm XRF") +#
scale_y_continuous("Arsenic ppm ICP-MS") +#
theme_light()#
Se.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Se.K.alpha*10000, Se*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Selenium ppm XRF") +#
scale_y_continuous("Selenium ppm ICP-MS") +#
theme_light()#
#
Mo.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Mo.K.alpha*10000, Mo*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Molybdenum ppm XRF") +#
scale_y_continuous("Molybdenum ppm ICP-MS") +#
theme_light()#
#
Cd.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Cd.K.alpha*10000, Cd*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Cadmium ppm XRF") +#
scale_y_continuous("Cadmium ppm ICP-MS") +#
theme_light()#
#
Pb.plot <- ggplot(SoilTrace[["ValCurves"]], aes(Pb.L.beta*10000, Pb*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Lead ppm XRF") +#
scale_y_continuous("Lead ppm ICP-MS") +#
theme_light()#
plot.list <- list(Na.plot, Mg.plot, Al.plot, P.plot, S.plot, K.plot, Ca.plot, Ti.plot, Cr.plot, Mn.plot, Fe.plot, Co.plot, Ni.plot, Cu.plot, Zn.plot, As.plot, Se.plot, Mo.plot, Cd.plot, Pb.plot)#
content = function(file) {#
    pdf(file = file, width=12, height=7)#
    for (i in 1:length(plot.list)) {#
        print(plot.list[[i]])#
    }#
    dev.off()#
}#
#
content("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/SoilrCal.pdf")
source('~/Desktop/CalCompare.r', chdir = TRUE)
update.packages()
source('~/Desktop/CalCompare.r', chdir = TRUE)
Na.plot <- ggplot(FertAll[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF", limits=c(min(Na), max(Na))) +#
scale_y_continuous("Sodium ppm ICP-MS") +#
coord_equal() +#
theme_light()
source('~/Desktop/CalCompare.r', chdir = TRUE)
Na.plot <- ggplot(FertAll[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF", limits=c(min(FertAll[["ValCurves"]]$Na), max(FertAll[["ValCurves"]]$Na))) +#
scale_y_continuous("Sodium ppm ICP-MS") +#
coord_equal() +#
theme_light()
Na.plot
Na.plot <- ggplot(FertAll[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF", limits=c(min(FertAll[["ValCurves"]]$Na), max(FertAll[["ValCurves"]]$Na))) +#
scale_y_continuous("Sodium ppm ICP-MS", limits=c(min(FertAll[["ValCurves"]]$Na), max(FertAll[["ValCurves"]]$Na))) +#
coord_equal() +#
theme_light()
Na.plot
Na.plot <- ggplot(FertAll[["ValCurves"]], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF", limits=c(min(FertAll[["ValCurves"]]$Na), max(FertAll[["ValCurves"]]$Na))) +#
scale_y_continuous("Sodium ppm ICP-MS", limits=c(min(FertAll[["ValCurves"]]$Na), max(FertAll[["ValCurves"]]$Na))) +#
coord_equal() +#
theme_light()
Na.plot
str(F4504SoilLight)
F4504PlantLight[["caList"]][["Cl.K.alpha"]][["StandardsUsed"]]
F4504PlantLight[["caList"]][["Cl.K.alpha"]][["CalTable"]][["StandardsUsed"]]
F4504PlantLight[["caList"]][["Cl.K.alpha"]][["StandardsUsed"]]
F4504PlantLight[["caList"]][["Cl.K.alpha"]]["StandardsUsed"]
str(F4504PlantLight[["caList"]][["Cl.K.alpha"]])
str(F4504PlantLight[["calList"]][["Cl.K.alpha"]])
F4504PlantLight[["calList"]][["Cl.K.alpha"]][["StandardsUsed"]]
head(FertAllValues)
update.packages()
Cl.plot <- ggplot(PlantLight[["ValCurves"]], aes(Cl.K.alpha[!is.na(Cl),]*10000, Cl*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Chlorine ppm XRF") +#
scale_y_continuous("Chlorine ppm ICP-MS") +#
coord_equal() +#
theme_light()
Cl.plot
Cl.plot <- ggplot(PlantLight[["ValCurves"]], aes(Cl.K.alpha[!is.na(Cl),]*10000, Cl[!is.na(Cl),]*10000, colour=Instrument[!is.na(Cl),], shape=Instrument[!is.na(Cl),])) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Chlorine ppm XRF") +#
scale_y_continuous("Chlorine ppm ICP-MS") +#
coord_equal() +#
theme_light()
Cl.plot
Cl.plot <- ggplot(PlantLight[["ValCurves"]][!is.na(Cl),], aes(Cl.K.alpha*10000, Cl*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Chlorine ppm XRF") +#
scale_y_continuous("Chlorine ppm ICP-MS") +#
coord_equal() +#
theme_light()
Cl.plot <- ggplot(PlantLight[["ValCurves"]][!is.na(PlantLight[["ValCurves"]]$Cl),], aes(Cl.K.alpha*10000, Cl*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Chlorine ppm XRF") +#
scale_y_continuous("Chlorine ppm ICP-MS") +#
coord_equal() +#
theme_light()
Cl.plot
str(F4352PlantLight[["calList"]][[Cl.K.alpha]])
str(F4352PlantLight[["calList"]][["Cl.K.alpha"]])
F4352PlantLight[["calList"]][["Cl.K.alpha"]]["StandardsUsed"]
F4352PlantLight[["calList"]][["Cl.K.alpha"]][["StandardsUsed"]]
F4352PlantLight[["calList"]][["Cl.K.alpha"]][["CalTable"]]["StandardsUsed"]
F4352PlantLight[["calList"]][["Cl.K.alpha"]][["CalTable"]][["StandardsUsed"]]
F4352PlantLight[["calList"]][["Cl.K.alpha"]][["StandardsUsed"]]
F4352PlantLight[["calList"]][["Cl.K.alpha"]][[4]]
str(F4352PlantLight[["calList"]][["Cl.K.alpha"]][[1]][["StandardsUsed"]]
)
F4352PlantLight[["calList"]][["Cl.K.alpha"]][[1]][["StandardsUsed"]]
Na.plot <- ggplot(PlantLight[["ValCurves"]][!is.na(PlantLight[["ValCurves"]]$Na) & F4352PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]]#
,], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
coord_equal() +#
theme_light()
Na.plot
Na.plot <- ggplot(PlantLight[["ValCurves"]][F4352PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]] & !is.na(PlantLight[["ValCurves"]]$Na)#
,], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
coord_equal() +#
theme_light()
Na.plot
Mg.plot <- ggplot(PlantLight[["ValCurves"]][F4352PlantLight[["calList"]][["Mg.K.alpha"]][[1]][["StandardsUsed"]] & !is.na(PlantLight[["ValCurves"]]$Mg),], aes(Mg.K.alpha*10000, Mg*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Magnesium ppm XRF") +#
scale_y_continuous("Magnesium ppm ICP-MS") +#
coord_equal() +#
theme_light()
Mg.plot
Cl.plot <- ggplot(PlantLight[["ValCurves"]][F4352PlantLight[["calList"]][["Cl.K.alpha"]][[1]][["StandardsUsed"]] & !is.na(PlantLight[["ValCurves"]]$Cl),], aes(Cl.K.alpha*10000, Cl*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Chlorine ppm XRF") +#
scale_y_continuous("Chlorine ppm ICP-MS") +#
coord_equal() +#
theme_light()
Cl.plot
Na.plot <- ggplot(PlantLight[["ValCurves"]][c(F4352PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]], F4473PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]], F4403PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]])& !is.na(PlantLight[["ValCurves"]]$Na)#
,], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
coord_equal() +#
theme_light()
Na.plot <- ggplot(PlantLight[["ValCurves"]][c(F4352PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]], F4473PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]], F4504PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]])& !is.na(PlantLight[["ValCurves"]]$Na)#
,], aes(Na.K.alpha*10000, Na*10000, colour=Instrument, shape=Instrument)) +#
geom_point() +#
stat_smooth(method="lm", se=FALSE) +#
scale_x_continuous("Sodium ppm XRF") +#
scale_y_continuous("Sodium ppm ICP-MS") +#
coord_equal() +#
theme_light()
Na.plot
length(c(F4352PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]], F4473PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]], F4504PlantLight[["calList"]][["Na.K.alpha"]][[1]][["StandardsUsed"]]))
test <- PlantLight[["ValCurves"]][!is.na(PlantLight[["ValCurves"]]$Na)#
,]
length(test[,1])
source('~/Desktop/CalCompare.r', chdir = TRUE)
shiny::runApp("~/GitHub/cloudCore")
update.packages()
shiny::runapp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
update.packages()
shiny:runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
