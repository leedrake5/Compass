?readBin
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="big")
head(floats)
floats[1:20]
library(ggplot2)
raw <- "/Users/lee/Desktop/02359-Soil Trace.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-124)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 150)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
head(integers[1:200])
integers[1:200]
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
124 + 2048
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
x <- c("a", "c", "d")
y <- c("e", "d", "c", "b", "a")
match(x, y)
x[match(x, y)]
y[match(x, y)]
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
origional <- c("As", "Ba", "Ca")
should <- c("Ca", "As", "Ba")
should[match(origional %in% should)]
should[match(origional, should)]
origional[match(origional, should)]
origional[match(should, origional)]
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
fluorescence.lines <- read.csv(file="~/GitHub/CloudCal/data/FluorescenceLines.csv")
fluorescence.lines$Symbol
as.character(fluorescence.lines$Symbol)
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
test <- c("As.K.alpha", "Ba.L.alpha", "Ca.K.alpha")
origional <- c("As", "Ba", "Ca")
should <- c("Ca", "As", "Ba")
test[match(should, origional)]
should <- c("Si", "Ca", "As", "Ba")
test[match(should, origional)]
na.omit(test[match(should, origional)])
as.character(na.omit(test[match(should, origional)]))
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
update.packages()
raw <- "/Users/lee/Desktop/Soil_Trace.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float",  n=nbrOfRecords, endian="little")
flots[1:20]
floats[1:20]
floats <- readBin(con=raw, what="float",  n=nbrOfRecords)
floats[1:20]
raw <- "/Users/lee/Desktop/Soil_Trace.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float",  n=nbrOfRecords, endian="little")
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")
doubles[1:20]
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")
characters[1:20]
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")
ints[1:20]
ints
integers
sequence <- seq(1, length(ints), 1)
library(ggplot2)
test <- ggplot(test.frame, aes((Sequence-124)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 150)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test.frame <- data.frame(Sequence=sequence, Maybe=integers)
test <- ggplot(test.frame, aes((Sequence-124)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 150)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-124)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-124)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 10000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-124)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-100)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-50)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-75)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-85)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-90)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-88)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-88)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 15)) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-88)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-85)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-90)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-95)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
integers
test <- ggplot(test.frame, aes((Sequence-104)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
test <- ggplot(test.frame, aes((Sequence-109)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
test <- ggplot(test.frame, aes((Sequence-90)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
90+2048
integers[90:2138]
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-104)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-100)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-110)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
raw <- "/Users/lee/Desktop/F4352_TR-MA-007.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)#
test <- ggplot(test.frame, aes((Sequence-90)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 1000000)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
 test
integer.sub <- integers[90:2137]
sequence <- seq(1, length(integer.sub), 1)
time.est <- integers[21]/10
time.est
integers[21]
integers[90:110]
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
raw <- "/Users/lee/Desktop/02359-Soil Trace.pdz"#
#
#fileSize <- file.info("/Users/lee/Desktop/02198-Soil Light.pdz")$size#
#nbrOfRecords <- length(raw) %/% 5#
#dim(raw) <- c(4, nbrOfRecords)#
#t.raw <- t(raw)#
nbrOfRecords <- 10000#
integers <- readBin(con=raw, what="integer", size=4, n=nbrOfRecords, endian="little")#
floats <- readBin(con=raw, what="float", size=4, n=nbrOfRecords, endian="little")#
numbers <- readBin(con=raw, what="numeric", size=4, n=nbrOfRecords, endian="little")#
doubles <- readBin(con=raw, what="double", size=4, n=nbrOfRecords, endian="little")#
ints <- readBin(con=raw, what="int", size=4, n=nbrOfRecords, endian="little")#
logicals <- readBin(con=raw, what="logical", size=4, n=nbrOfRecords, endian="little")#
complexes <- readBin(con=raw, what="complex",  n=nbrOfRecords, endian="little")#
characters <- readBin(con=raw, what="character", size=4, n=nbrOfRecords, endian="little")#
raws <- readBin(con=raw, what="raw", size=1, n=nbrOfRecords, endian="little")#
sequence <- seq(1, length(ints), 1)#
#
test.frame <- data.frame(Sequence=sequence, Maybe=integers)
test <- ggplot(test.frame, aes((Sequence-124)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 150)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-104)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 150)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
test <- ggplot(test.frame, aes((Sequence-110)*.02, Maybe/1000)) + geom_line() + scale_x_continuous(limits = c(0, 2048)*.02) + scale_y_continuous(limits=c(0, 150)) + geom_vline(xintercept=6.40, lty=2) + geom_vline(xintercept=20.22, lty=2)#
test
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
update.packages()
source('~/Desktop/dist/runShinyApp.R', chdir = TRUE)
rsconnect::deployApp("~/Desktop/CloudCal", appName("CloudCal"))
rsconnect::deployApp("~/Desktop/CloudCal", appName="CloudCal"))
rsconnect::deployApp("~/Desktop/CloudCal", "CloudCal"))
rsconnect::deployApp("~/Desktop/CloudCal", "CloudCal")
rsconnect::deployApp("~/Desktop/CloudCal", appName="CloudCal")
update.packages()
test <- read.table(file="~/Desktop/trumpApproval.tsv", header=TRUE, sep="\t", na.strings="/", quote = "")
ls(test)
library(reshape2)
test.cast <- dcast(data=test, poll_slug~ sample_subpopulation)
head(test.cat)
head(test.cast)
test2 <-     read.table(file="http://elections.huffingtonpost.com/pollster/api/v2/questions/18-US-House/poll-responses-clean.tsv", header=TRUE, sep="\t", na.strings="/", quote = "")
ls(test2)
ls(test)
full.test <- rbind(test[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")], test2[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")])
length(full.test[,1])
test.cast <- dcast(data=full.test, poll_slug~ sample_subpopulation, value.var=observations)
test.cast <- dcast(data=full.test, poll_slug~ sample_subpopulation, value.var="observations")
test.cast <- dcast(data=full.test, poll_slug~ sample_subpopulation, value.var="observations", fun.aggregate=mean)
head(test.cast)
test.cast <- dcast(data=full.test, poll_slug~ sample_subpopulation+end_date, value.var="observations", fun.aggregate=mean)
head(test.cast)
test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)
head(test.cast)
write.csv(test.cast, file="~/test.csv")
test.cast$Republican <- sum( test.cast[," Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"]
)
test.cast$Republican <- sum( test.cast[," Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"])
test.cast$Republican <- sum( test.cast[" Registered Voters - Republican"], test.cast["Likely Voters - Republican"], test.cast["Adults - Republican"])
test.cast$Republican <- sum( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"])
head(test.cast$Republican)
test.cast$Democrat <- sum( test.cast[,"Registered Voters - Democrat"], test.cast[,"Likely Voters - Democrat"], test.cast[,"Adults - Democrat"])
write.csv(test.cast, file="~/test.csv")
test.cast$Republican <- sum( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"], na.rm=TRUE)
test.cast$Democrat <- sum( test.cast[,"Registered Voters - Democrat"], test.cast[,"Likely Voters - Democrat"], test.cast[,"Adults - Democrat"], na.rm=TRUE)
write.csv(test.cast, file="~/test.csv")
test.cast$Republican <- mean( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"], na.rm=TRUE)
test.cast <- test.cast[test.cast == "NaN"] = "NA"
test.cast[test.cast == "NaN"] = "NA"
head(test.cast)
test.cast$Republican <- sum( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"], na.rm=TRUE)
test.cast[test.cast == "NA"] = 0
head(test.cast)
test.cast$Republican <- sum( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"], na.rm=TRUE)
test.cast[test.cast == "<NA>"] = 0
head(test.cast)
test.cast[test.cast == <NA>] = 0
make.true.NA <- function(x) if(is.character(x)||is.factor(x)){#
                                  is.na(x) <- x=="NA"; x} else {#
                                  x}
testr.cast <- sapply(test.cast, make.true.NA)
head(testr.cast)
testr.cast <- sapply(test.cast, as.numeric)
head(testr.cast)
testr.cast[testr.cast == "NA"] = 0
test.cast$Republican <- sum( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"], na.rm=TRUE)
test.cast <- testr.cast
test.cast$Republican <- sum( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"], na.rm=TRUE)
head(test.cast)
head(testr.cast)
testr.cast[testr.cast == "NA"] = 0
head(testr.cast)
testr.cast[testr.cast == NA] = 0
head(testr.cast)
f    test <- read.table(file="http://elections.huffingtonpost.com/pollster/api/v2/questions/00c%20-Pres-45-Trump%20-%20Job%20Approval%20-%20National/poll-responses-clean.tsv", header=TRUE, sep="\t", na.strings="/", quote = "")#
#
    test2 <- read.table(file="http://elections.huffingtonpost.com/pollster/api/v2/questions/18-US-House/poll-responses-clean.tsv", header=TRUE, sep="\t", na.strings="/", quote = "")#
    full.test <- rbind(test[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")], test2[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")])
test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)
head(test.cast)
test.cast <- sapply(test.cast, as.character)
head(test.cast)
test.cast <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))
head(test.cast)
length(test.cast)
test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)
length(test.cast)
test.cast <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))
head(test.cast)
test.cast[test.cast == "NaN"] = 0
head(test.cast)
testr.cast[testr.cast == NA] = 0
head(testr. full.test <- rbind(test[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")], test2[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")])#
    test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)#
    test.cast <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[test.cast == NA] = 0)
full.test <- rbind(test[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")], test2[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")])#
    test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)#
    test.cast <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[test.cast == NA] = 0
head(test.cast)
is.na(test.cast[1,"Adults - Democrat"])
test.cast[is.na(test.cast)] <- 0
head(test.cast)
test.cast$Republican <- sum( test.cast[,"Registered Voters - Republican"], test.cast[,"Likely Voters - Republican"], test.cast[,"Adults - Republican"])
test.cast <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0
is.numeric(test.cast[,"Registered Voters - Republican"])
test.cast$Republican <- rowSums( test.cast[,c("Registered Voters - Republican", "Likely Voters - Republican","Adults - Republican")])
test.cast$Republican <- rowSums( test.cast[,c("Registered Voters - Republican", "Likely Voters - Republican", "Adults - Republican")])
sub.frame <- test.cast[,c("Registered Voters - Republican", "Likely Voters - Republican", "Adults - Republican")]
length(test.cast)
test.cast <- as.data.frame(test.cast)
length(test.cast)
head(test.cast)
test <- read.table(file="http://elections.huffingtonpost.com/pollster/api/v2/questions/00c%20-Pres-45-Trump%20-%20Job%20Approval%20-%20National/poll-responses-clean.tsv", header=TRUE, sep="\t", na.strings="/", quote = "")#
#
    test2 <- read.table(file="http://elections.huffingtonpost.com/pollster/api/v2/questions/18-US-House/poll-responses-clean.tsv", header=TRUE, sep="\t", na.strings="/", quote = "")#
    full.test <- rbind(test[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")], test2[,c("poll_slug", "sample_subpopulation", "start_date", "end_date", "survey_house", "mode", "observations", "partisanship")])#
    test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)#
    test.cast <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)#
    test.cast$Republican <- rowSums( test.cast[,c("Registered Voters - Republican", "Likely Voters - Republican", "Adults - Republican")])
head(test.cast$Republican)
test.cast$Democrat <- rowSums( test.cast[,c("Registered Voters - Democrat", "Likely Voters - Democrat", "Adults - Democrat")])
write.csv(test.cast, file="~/test.csv")
test.cast <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)
head(test.cast)
test.cast[,3:length(test.cast)] <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)
head(test.cast)
test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)#
    test.cast[,3:length(test.cast)] <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)
head(test.cast)
test.cast$Republican <- rowSums( test.cast[,c("Registered Voters - Republican", "Likely Voters - Republican", "Adults - Republican")])
head(test.cast$Republican)
test.cast$Democrat <- rowSums( test.cast[,c("Registered Voters - Democrat", "Likely Voters - Democrat", "Adults - Democrat")])
write.csv(test.cast, file="~/test.csv")
test.cast[,3:length(test.cast)] <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)#
    test.cast$Total <- rowSums( test.cast[,c("Registered Voters", "Likely Voters", "Adults")])#
    test.cast$Republican <- rowSums( test.cast[,c("Registered Voters - Republican", "Likely Voters - Republican", "Adults - Republican")])/test.cast$Total#
    test.cast$Democrat <- rowSums( test.cast[,c("Registered Voters - Democrat", "Likely Voters - Democrat", "Adults - Democrat")])/test.cast$Total#
    test.cast$Independent <- rowSums( test.cast[,c("Registered Voters - Independent", "Likely Voters - Independent", "Adults - Independent")])/test.cast$Total
test.cast$Independent <- rowSums( test.cast[,c("Registered Voters - independent", "Likely Voters - independent", "Adults - independent")])/test.cast$Total
write.csv(test.cast, file="~/test.csv")
test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)#
    test.cast[,3:length(test.cast)] <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)#
    test.cast$Total <- rowSums( test.cast[,c("Registered Voters", "Likely Voters", "Adults")])#
    test.cast$Republican <- rowSums( test.cast[,c("Registered Voters - Republican", "Likely Voters - Republican", "Adults - Republican")])/test.cast$Total#
    test.cast$Democrat <- rowSums( test.cast[,c("Registered Voters - Democrat", "Likely Voters - Democrat", "Adults - Democrat")])/test.cast$Total#
    test.cast$Independent <- rowSums( test.cast[,c("Registered Voters - independent", "Likely Voters - independent", "Adults - independent")])/test.cast$Total
write.csv(test.cast, file="~/test.csv")
test.cast[,3:length(test.cast)] <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)#
    test.cast$Total <- rowSums( test.cast[,c("Registered Voters", "Likely Voters", "Adults")])
test.cast$Republican <- rowSums( test.cast[,grepl( "Republican" , names(test.cast ) )])/test.cast$Total
test.cast <- dcast(data=full.test, poll_slug+end_date~ sample_subpopulation, value.var="observations", fun.aggregate=mean)#
    test.cast[,3:length(test.cast)] <- sapply(test.cast[,3:length(test.cast)], function(x) as.numeric(as.character(x)))#
    test.cast[test.cast == "NaN"] = 0#
    test.cast[is.na(test.cast)] <- 0#
    test.cast <- as.data.frame(test.cast)#
    test.cast$Total <- rowSums( test.cast[,c("Registered Voters", "Likely Voters", "Adults")])#
    test.cast$Republican <- rowSums( test.cast[,grepl( "Republican" , names(test.cast ) )])/test.cast$Total#
    test.cast$Democrat <- rowSums( test.cast[,grepl( "Democrat" , names(test.cast ) )])/test.cast$Total#
    test.cast$Independent <- rowSums( test.cast[,grepl( "independent" , names(test.cast ) )])/test.cast$Total
write.csv(test.cast, file="~/test.csv")
shiny::runApp("~/GitHub/pollChangePoint")
x <- c(1, 2,3)
sd(x)
shiny::runApp("~/GitHub/pollChangePoint")
rsconnect::deployApp("~/GitHub/pollChangePoint", appName="pollChangePoint")
update.packages(0)
update.packages()
shiny::runApp('/Users/lee/GitHub/CloudCal', launch.browser=TRUE)
cal.lmsummary <-function(lm.object){#
    res<-c(paste(as.character(summary(lm.object)$call),collapse=" "),#
    length(lm.object$model),#
    summary(lm.object)$r.squared,#
    summary(lm.object)$adj.r.squared,#
    summary(lm.object)$fstatistic,#
    pf(summary(lm.object)$fstatistic[1],summary(lm.object)$fstatistic[2],summary(lm.object)$fstatistic[3],lower.tail=FALSE))#
    names(res)<-c("Call","n", "R2","Adj. R2",#
    "F-statistic","numdf","dendf","p-value")#
    return(res)}#
val.lmsummary <-function(lm.object){#
    res<-c(paste(as.character(summary(lm.object)$call),collapse=" "),#
    lm.object$coefficients[1],#
    lm.object$coefficients[2],#
    length(lm.object$model),#
    summary(lm.object)$coefficients[2,2],#
    summary(lm.object)$r.squared,#
    summary(lm.object)$adj.r.squared,#
    summary(lm.object)$fstatistic,#
    pf(summary(lm.object)$fstatistic[1],summary(lm.object)$fstatistic[2],summary(lm.object)$fstatistic[3],lower.tail=FALSE))#
    names(res)<-c("Call","Intercept","Slope","n","Slope SE","R2","Adj. R2",#
    "F-statistic","numdf","dendf","p-value")#
    return(res)}
F4166ManureLightPred <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/Manure Val Tests/F4166ManureLightVal.quant")
F4352ManureLight <- readRDS("/Users/lee/Dropbox/Documents/ICRAF/2017 Data/New ICRAF Tracer 5i Cals Final/ICRAF 5i 900F4352 Cal/R Cals/900F4352ManureLight.quant")
str(F4352ManureLight)
test.element <- F4352ManureLight[["calList"]][[2]][["Ca.K.alpha"]]
summary(test.element)
str( F4352ManureLight[["calList"]])
str( F4352ManureLight[["calList"]][["Ca.K.alpha"]])
str( F4352ManureLight[["calList"]][["Ca.K.alpha"]][[2]])
summar( F4352ManureLight[["calList"]][["Ca.K.alpha"]][[2]])
summary( F4352ManureLight[["calList"]][["Ca.K.alpha"]][[2]])
cal.lmsummary(F4352ManureLight[["calList"]][["Ca.K.alpha"]][[2]])
test.lm <- lm(c(1, 2, 3)~c(3, 1, 2))
cal.lmsummary(test.lm)
cal.lmsummary <-function(lm.object){#
    res<-c(paste(as.character(summary(lm.object)$call),collapse=" "),#
    length(lm.object$model),#
    summary(lm.object)$r.squared,#
    summary(lm.object)$adj.r.squared,#
    summary(lm.object)$fstatistic,#
    pf(summary(lm.object)$fstatistic[3],lower.tail=FALSE))#
    names(res)<-c("Call","n", "R2","Adj. R2",#
    "F-statistic","numdf","dendf","p-value")#
    return(res)}
cal.lmsummary(test.lm)
cal.lmsummary <-function(lm.object){#
    res<-c(paste(as.character(summary(lm.object)$call),collapse=" "),#
    length(lm.object$model),#
    summary(lm.object)$r.squared,#
    summary(lm.object)$adj.r.squared,#
    summary(lm.object)$fstatistic,#
    pf(summary(lm.object)$fstatistic[3],lower.tail=FALSE))#
    names(res)<-c("Call","n", "R2","Adj. R2",#
    "F-statistic","p-value")#
    return(res)}
cal.lmsummary(test.lm)
shiny::runApp("~/GitHub/Compass")
?updateNumericInput
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
?dropdownButton
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
shiny::runApp("~/GitHub/Compass")
